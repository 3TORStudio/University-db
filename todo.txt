1) jezeli znajdzie wiele tych samych nazwisk to niech wyswietli wszystkie,
na razie zwraca pierwszy napotkany - zrobione
2) Konrad pojawia się z nazwiskiem Wasilewska - zrobione
3) Przegladanie plików do wczytania - zrobione
4) Sprawdzanie poprawnosci nazwy bazy danych - zrobione
5) Losowanie adresów - zrobione
6) Wyswietlanie nazwy bazy danych w menu - zrobione
7) Generuje tylko studentów - zrobione
8) Potwierdzenie usunięcia studenta
9) Usunięcie z potwierdzeniem  osoby po peselu
10) Pierwsze menu -> nowa czy wczytanie bazy


#include <iostream>
#include <filesystem>
//namespace fs = std::filesystem;
int main() {
  //const fs::path pathToShow{ argc >= 2 ? argv[1] : fs::current_path();
  const std::filesystem::path pathToShow = std::filesystem::current_path();
  
    for (const auto& entry : std::filesystem::directory_iterator(pathToShow)) {
      const auto filenameStr = entry.path().filename().string();
      //std::cout << "ext: " << std::filesystem::path(filenameStr).extension().string() << '\n';
      // if (entry.is_directory()) {
      //     std::cout << "dir:  " << filenameStr << '\n';
      // }
      // else 
      if (entry.is_regular_file() && 
          std::filesystem::path(filenameStr).extension().string() == ".txt") {
          std::cout << "file: " << filenameStr << '\n';
      }
  //     else
  //         std::cout << "??    " << filenameStr << '\n';
  }
} 

const std::filesystem::path pathToShow = std::filesystem::current_path();
   std::string nameOfBase = getName() + "DataBase.txt";
   for (const auto& entry : std::filesystem::directory_iterator(pathToShow)) {
      const auto filenameStr = entry.path().filename().string();
      if (entry.is_regular_file() && 
          std::filesystem::path(filenameStr).extension().string() == ".txt") {
          std::cout << "file: " << filenameStr << '\n';
      }
  }